doctype html
html(lang="en")
    head
        title Dashboard
        link(rel="stylesheet" type="text/css" href="css/bootstrap.min.css")
        link(rel="stylesheet" type="text/css" href="css/font-awesome.min.css")
        link(rel="stylesheet" type="text/css" href="css/AdminLTE.min.css")
        link(rel="stylesheet" type="text/css" href="css/ionicons.css")
        link(rel="stylesheet" type="text/css" href="AdminLTE-2.4.5/dist/css/skins/skin-blue.min.css")
        link(rel="stylesheet" type="text/css" href="css/jquery.gridster.css")
    body(onload="loadWidget()", class="hold-transition skin-blue sidebar-mini")
        div(class="wrapper")
            header(class="main-header")
                a(href="/dashboard", class="logo", style="font-size: xx-large;") DashBoard
                nav(class="navbar navbar-static-top")
                    div(class="navbar-custom-menu")
                        ul(class="nav navbar-nav")
                            li(class="dropdown user user-menu")
                                a(href="#", class="dropdown-toggle", data-toggle="dropdown")
                                    img(src=`${displayPick}`, class="user-image", alt="User Image")
                                    span(class="hidden-xs") #{username}
                                ul(class="dropdown-menu")
                                    li(class="user-header")
                                        img(src=`${displayPick}`, class="img-circle", alt="User Image")
                                        br
                                        p #{username}
                                    li(class="user-footer")
                                        div(class="pull-right")
                                            a(href="/logout", class="btn btn-default btn-flat") Sign Out
            aside(class="main-sidebar")
                section(class="sidebar")
                    div(class="user-panel")
                        div(class="pull-left image")
                            img(src=`${displayPick}`, class="img-circle", alt="User Image")
                        div(class="pull-left info")
                            p #{username}
                            a(href="#") Online
                                i(class="fa fa-circle text-success")
                    ul(class="sidebar-menu", data-widget="tree")
                        li(class="header") Services
                        li(class="treeview")
                            a(href="#")
                                i(class="fa fa-twitter")
                                span Twitter
                                span(class="pull-right-container")
                                    i(class="fa fa-angle-left pull-right")
                            ul(class="treeview-menu")
                                li
                                    a(class="btn btn-info", data-toggle="modal", data-target="#modal-twitter") Feed
                        li(class="treeview")
                            a(href="#")
                                i(class="fa fa-twitch")
                                span Twitch
                                span(class="pull-right-container")
                                    i(class="fa fa-angle-left pull-right")
                            ul(class="treeview-menu")
                                li
                                    a(class="btn btn-info", data-toggle="modal", data-target="#modal-twitch") Embed Stream
                        li(class="treeview")
                            a(href="#")
                                i(class="fa fa-youtube")
                                span Youtube
                                span(class="pull-right-container")
                                    i(class="fa fa-angle-left pull-right")
                            ul(class="treeview-menu")
                                li
                                    a(class="btn btn-info", data-toggle="modal", data-target="#modal-youtube") Embed Video
                        li(class="treeview")
                            a(href="#")
                                i(class="fa fa-github")
                                span Github
                                span(class="pull-right-container")
                                    i(class="fa fa-angle-left pull-right")
                            ul(class="treeview-menu")
                                li
                                    a(class="btn btn-info", data-toggle="modal", data-target="#modal-github") Repo Stats
                        li(class="treeview")
                            a(href="#")
                                i(class="fa fa-stack-overflow")
                                span Intra Epitech
                                span(class="pull-right-container")
                                    i(class="fa fa-angle-left pull-right")
                            ul(class="treeview-menu")
                                li
                                    a(class="btn btn-info", data-toggle="modal", data-target="#modal-intra") Planning
            div(class="content-wrapper")
                section(class="content container-fluid", id="widget-container")
                    div(class="gridster")
                        ul
                    div(class="modal modal-info fade", id="modal-twitter", tabIndex="-1", role="dialog", aria-labelledby="twitter-modal")
                        div(class="modal-dialog" role="document")
                            div(class="modal-content")
                                div(class="modal-header")
                                    button(type="button" class="close" data-dismiss="modal" aria-label="Close")
                                        span(span aria-hidden="true") &times;
                                    h4(class="modal-title") Add an user timeline
                                div(class="modal-body")
                                    form(action="javascript:createTwitterWidget(twitterAccount.value)")
                                        div(class="form-group")
                                            label(for="twitterAccount", class="control-label") @ or user's id:
                                            input(class="form-control", type="text", placeHolder="Twitter", name="twitterAccount", id="twitterAccount")
                                        button(type="submit", class="btn btn-primary btn-block btn-flat", aria-hidden="true") Submit
                    div(class="modal modal-info fade", id="modal-twitch", tabIndex="-1", role="dialog", aria-labelledby="twitch-modal")
                        div(class="modal-dialog" role="document")
                            div(class="modal-content")
                                div(class="modal-header")
                                    button(type="button" class="close" data-dismiss="modal" aria-label="Close")
                                        span(span aria-hidden="true") &times;
                                    h4(class="modal-title") Add an embed stream
                                div(class="modal-body")
                                    form(action="javascript:createTwitchEmbed(twitchChannel.value)")
                                        div(class="form-group")
                                            label(for="twitchChannel", class="control-label") Channel name:
                                            input(class="form-control", type="text", placeHolder="jvtv", name="twitchChannel", id="twitchChannel")
                                        button(type="submit", class="btn btn-primary btn-block btn-flat", aria-hidden="true") Submit
                    div(class="modal modal-info fade", id="modal-youtube", tabIndex="-1", role="dialog", aria-labelledby="youtube-modal")
                        div(class="modal-dialog" role="document")
                            div(class="modal-content")
                                div(class="modal-header")
                                    button(type="button" class="close" data-dismiss="modal" aria-label="Close")
                                        span(span aria-hidden="true") &times;
                                    h4(class="modal-title") Add an embed video
                                div(class="modal-body")
                                    form(action="javascript:createYoutubeEmbed(videoId.value)")
                                        div(class="form-group")
                                            label(for="videoId", class="control-label") Video Id:
                                            input(class="form-control", type="text", placeHolder="M7lc1UVf-VE", name="videoId", id="videoId")
                                        button(type="submit", class="btn btn-primary btn-block btn-flat", aria-hidden="true") Submit
                    div(class="modal modal-info fade", id="modal-intra", tabIndex="-1", role="dialog", aria-labelledby="intra-modal")
                        div(class="modal-dialog" role="document")
                            div(class="modal-content")
                                div(class="modal-header")
                                    button(type="button" class="close" data-dismiss="modal" aria-label="Close")
                                        span(span aria-hidden="true") &times;
                                    h4(class="modal-title") Add a planning
                                div(class="modal-body")
                                    form(action="javascript:createIntraWidget(autoLoggingLink.value)")
                                        div(class="form-group")
                                            label(for="autoLoggingLink", class="control-label") Auto Logging Link:
                                            input(class="form-control", type="text", name="autoLoggingLink", id="autoLoggingLink")
                                        button(type="submit", class="btn btn-primary btn-block btn-flat", aria-hidden="true") Submit
                    div(class="modal modal-info fade", id="modal-github", tabIndex="-1", role="dialog", aria-labelledby="github-modal")
                        div(class="modal-dialog" role="document")
                            div(class="modal-content")
                                div(class="modal-header")
                                    button(type="button" class="close" data-dismiss="modal" aria-label="Close")
                                        span(span aria-hidden="true") &times;
                                    h4(class="modal-title") Add a planning
                                div(class="modal-body")
                                    form(action="javascript:createGithubWidget(user.value, repo.value)")
                                        div(class="form-group")
                                            label(for="user", class="control-label") User:
                                            input(class="form-control", type="text", name="user", id="user")
                                            label(for="repo", class="control-label") Repo:
                                            input(class="form-control", type="text", name="repo", id="repo")
                                        button(type="submit", class="btn btn-primary btn-block btn-flat", aria-hidden="true") Submit


    script(src="https://embed.twitch.tv/embed/v1.js")
    script(async, src="https://platform.twitter.com/widgets.js", charset="utf-8")
    script(src="js/jquery.min.js")
    script(src="js/jquery.gridster.js")
    script(src="AdminLTE-2.4.5/bower_components/bootstrap/dist/js/bootstrap.min.js")
    script(src="AdminLTE-2.4.5/dist/js/adminlte.min.js")
    script(src="js/octokit-rest.min.js")
    script(src="https://unpkg.com/ionicons@4.4.6/dist/ionicons.js")

    script.
        function loadWidget() {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", "http://91.134.141.40:8080/loadWidget", true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status == 200) {
                    var json = JSON.parse(xhr.responseText);
                    for (i = 0; i < json.widgets.length; i++) {
                        console.log(json.widgets[i].widgetType);
                        if (json.widgets[i].widgetType === "twitter") {
                            createTwitterWidget(json.widgets[i].config.twitterAccount, false);
                        } else if (json.widgets[i].widgetType === "twitch") {
                            createTwitchEmbed(json.widgets[i].config.channel, false);
                        } else if (json.widgets[i].widgetType === "youtube") {
                            createYoutubeEmbed(json.widgets[i].config.videoId, false);
                        } else if (json.widgets[i].widgetType === "intra") {
                            createIntraWidget(json.widgets[i].config.link, false, json.widgets[i].id);
                        } else if (json.widgets[i].widgetType === "github-stat") {
                            createGithubWidget(json.widgets[i].config.user, json.widgets[i].config.repo, false);
                        }
                    }
                }
            };
            xhr.send();
        };

    script.
        function deleteWidget(id) {
            var li = document.getElementById(id);
            li.parentNode.removeChild(li);

            var xhr = new XMLHttpRequest();
            xhr.open("POST", "http://91.134.141.40:8080/deleteWidget", true);
            xhr.setRequestHeader("Content-Type", "application/json");
            var data = JSON.stringify({"widgetId": id});
            xhr.send(data);
        };

    script.
        $(function(){ //DOM Ready
            $(".gridster ul").gridster({
                widget_margins: [10, 10],
                widget_base_dimensions: [150, 150],
                helper: 'clone',
                resize: {
                    enabled: false
                }
            });
        });

    script.
        function createTwitterWidget(twitterAccount, save = true) {
            var node = document.createElement("LI");
            node.id = "twitter-"+twitterAccount;

            //- remove button
            var remove = document.createElement("BUTTON");
            remove.type = "button";
            remove.className = "pull-right btn btn-box-tool";
            remove.innerHTML = "<i class='fa fa-times'></i>"
            remove.onclick = function() {deleteWidget(node.id)};
            node.appendChild(remove);

            var gridster = $(".gridster ul").gridster().data('gridster');
            twttr.widgets.createTimeline(
                {
                    sourceType: 'profile',
                    screenName: twitterAccount
                }, node, {
                    width: '300',
                    height: '450',
                    chrome: 'noscrollbar',
                    theme: 'dark'
                });
            gridster.add_widget(node, 2, 3);

            //- update user
            if (save) {
                var xhr = new XMLHttpRequest();
                xhr.open("POST", "http://91.134.141.40:8080/saveWidget", true);
                xhr.setRequestHeader("Content-Type", "application/json");
                var data = JSON.stringify({"widgetType": "twitter", "id": node.id, "sizeX": 2, "sizeY": 3, "config": {"sourceType": "profile","twitterAccount": twitterAccount}});
                xhr.send(data);
            }
        };

    script.
        function createTwitchEmbed(twitchChannel, save=true) {
            var gridster = $(".gridster ul").gridster().data('gridster');
            var node = document.createElement("LI");

            //- remove button
            var remove = document.createElement("BUTTON");
            remove.type = "button";
            remove.className = "pull-right btn btn-box-tool";
            remove.innerHTML = "<i class='fa fa-times'></i>";
            remove.onclick = function() {deleteWidget(node.id)};
            node.appendChild(remove);

            node.id = "embed-" + twitchChannel;
            gridster.add_widget(node, 5, 3);
            new Twitch.Embed(node.id, {
                width: 750,
                height: 460,
                channel: twitchChannel,
                theme: 'dark'
            });

            //- update user
            if (save) {
                var xhr = new XMLHttpRequest();
                xhr.open("POST", "http://91.134.141.40:8080/saveWidget", true);
                xhr.setRequestHeader("Content-Type", "application/json");
                var data = JSON.stringify({"widgetType": "twitch", "id": node.id, "sizeX": 5, "sizeY": 3, "config": {"channel": twitchChannel}});
                xhr.send(data);
            }
        };

    script.
        function createYoutubeEmbed(videoId, save=true) {
            var gridster = $(".gridster ul").gridster().data('gridster');
            var node = document.createElement("LI");

            //- remove button
            var remove = document.createElement("BUTTON");
            remove.type = "button";
            remove.className = "pull-right btn btn-box-tool";
            remove.innerHTML = "<i class='fa fa-times'></i>";
            remove.onclick = function() {deleteWidget(node.id)};
            node.appendChild(remove);

            var iframe = document.createElement("iframe");
            iframe.src = "https://www.youtube.com/embed/"+videoId;
            iframe.width = "750px";
            iframe.height = "350px";
            node.appendChild(iframe);

            node.id = "youtube-"+videoId;
            gridster.add_widget(node, 5, 3);

            if (save) {
                var xhr = new XMLHttpRequest();
                xhr.open("POST", "http://91.134.141.40:8080/saveWidget", true);
                xhr.setRequestHeader("Content-Type", "application/json");
                var data = JSON.stringify({"widgetType": "youtube", "id": node.id, "sizeX": 5, "sizeY": 3, "config": {"videoId": videoId}});
                xhr.send(data);
            }
        }

    script.
        function createIntraWidget(autoLoggingLink, save=true, id) {
            var gridster = $(".gridster ul").gridster().data('gridster');
            var node = document.createElement("LI");
            var d = new Date();
            if (id) {
                node.id = id;
            } else {
                node.id = "intra-"+d.getTime();
            }

            //- remove button
            var remove = document.createElement("BUTTON");
            remove.type = "button";
            remove.className = "pull-right btn btn-box-tool";
            remove.innerHTML = "<i class='fa fa-times'></i>";
            remove.onclick = function() {deleteWidget(node.id)};
            node.appendChild(remove);

            var iframe = document.createElement("iframe");
            iframe.src = autoLoggingLink;
            iframe.sandbox = "allow-forms allow-scripts";
            iframe.width = "750px";
            iframe.height = "750px";
            node.appendChild(iframe);

            gridster.add_widget(node, 5, 5);
            if (save) {
                var xhr = new XMLHttpRequest();
                xhr.open("POST", "http://91.134.141.40:8080/saveWidget", true);
                xhr.setRequestHeader("Content-Type", "application/json");
                var data = JSON.stringify({"widgetType": "intra", "id": node.id, "sizeX": 5, "sizeY": 3, "config": {"link": autoLoggingLink}});
                xhr.send(data);
            }
        };

    script.
        async function paginate (method, owner, repo) {
            const octokit = new Octokit();
            let response = await method({ owner: owner, repo: repo,  per_page: 100 })
            let { data } = response
            while (octokit.hasNextPage(response)) {
                response = await octokit.getNextPage(response)
                data = data.concat(response.data)
            }
            return data
        };

        async function createGithubWidget(user, repo, save=true) {
            const octokit = new Octokit();
            var gridster = $(".gridster ul").gridster().data('gridster');

            var secret = "#{githubToken}";
            if (secret) {
                octokit.authenticate({
                    type: 'oauth',
                    token: secret
                });
            }

            var pullRequests = await paginate(octokit.pullRequests.getAll, user, repo);
            var forks = await paginate(octokit.repos.getForks, user, repo);
            var branches = await paginate(octokit.repos.getBranches, user, repo);

            var node = document.createElement("LI");
            node.id = "github-"+user+"-"+repo;
            //- <div class="col-md-4 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-aqua"><ion-icon name="git-network"></ion-icon></span><div class="info-box-content"><span class="info-box-text" id="fork-text" style="font-size: x-small;"></span><span class="info-box-number" id="fork-nb"></span></div></div></div>
            node.innerHTML = '<div class="box"><div class="box-header with-border"><h3 class="box-title" id="box-title"></h3><div class="box-tools pull-right"> <button type="button" class="btn"><i class="fa fa-times"></i></button></div></div><div class="box-body"><div class="col-md-4 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-aqua"><ion-icon name="git-pull-request"></ion-icon></span><div class="info-box-content"><span class="info-box-text" id="pull-request-text" style="font-size: x-small;"></span><span class="info-box-number" id="pull-request-nb"></span></div></div></div><div class="col-md-4 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-aqua"><ion-icon name="git-network"></ion-icon></span><div class="info-box-content"><span class="info-box-text" id="fork-text" style="font-size: x-small;"></span><span class="info-box-number" id="fork-nb"></span></div></div></div><div class="col-md-4 col-sm-6 col-xs-12"><div class="info-box"><span class="info-box-icon bg-aqua"><ion-icon name="git-branch"></ion-icon></span><div class="info-box-content"><span class="info-box-text" id="branches-text" style="font-size: x-small;"></span><span class="info-box-number" id="branches-nb"></span></div></div></div></div><div class="box-footer"></div>';
            node.querySelector("#box-title").innerHTML = user + "'s "+ repo + " repo stats";
            node.querySelector("#pull-request-text").innerHTML = "Pull's requests";
            node.querySelector("#pull-request-nb").innerHTML = pullRequests.length;
            node.querySelector("#fork-text").innerHTML = "Forks";
            node.querySelector("#fork-nb").innerHTML = forks.length;
            node.querySelector("#branches-text").innerHTML = "Branches";
            node.querySelector("#branches-nb").innerHTML = branches.length;
            node.querySelector(".btn").onclick = function() {deleteWidget(node.id)};
            gridster.add_widget(node, 5, 1);

            if (save) {
                var xhr = new XMLHttpRequest();
                xhr.open("POST", "http://91.134.141.40:8080/saveWidget", true);
                xhr.setRequestHeader("Content-Type", "application/json");
                var data = JSON.stringify({"widgetType": "github-stat", "id": node.id, "sizeX": 5, "sizeY": 1, "config": {"user": user, "repo": repo}});
                xhr.send(data);
            }
        };

    script.
        window.twttr = (function(d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0],
          t = window.twttr || {};
        if (d.getElementById(id)) return t;
        js = d.createElement(s);
        js.id = id;
        js.src = "https://platform.twitter.com/widgets.js";
        fjs.parentNode.insertBefore(js, fjs);
        t._e = [];
        t.ready = function(f) {
            t._e.push(f);
        };
            return t;
        }(document, "script", "twitter-wjs"));